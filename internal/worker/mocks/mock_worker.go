// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/worker/worker.go

// Package mock_worker is a generated GoMock package.
package mock_worker

import (
	context "context"
	reflect "reflect"
	time "time"

	worker "github.com/arefev/gophermart/internal/worker"
	gomock "github.com/golang/mock/gomock"
)

// MockStatusRequest is a mock of StatusRequest interface.
type MockStatusRequest struct {
	ctrl     *gomock.Controller
	recorder *MockStatusRequestMockRecorder
}

// MockStatusRequestMockRecorder is the mock recorder for MockStatusRequest.
type MockStatusRequestMockRecorder struct {
	mock *MockStatusRequest
}

// NewMockStatusRequest creates a new mock instance.
func NewMockStatusRequest(ctrl *gomock.Controller) *MockStatusRequest {
	mock := &MockStatusRequest{ctrl: ctrl}
	mock.recorder = &MockStatusRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusRequest) EXPECT() *MockStatusRequestMockRecorder {
	return m.recorder
}

// Request mocks base method.
func (m *MockStatusRequest) Request(ctx context.Context, number string, res *worker.OrderResponse) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", ctx, number, res)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request.
func (mr *MockStatusRequestMockRecorder) Request(ctx, number, res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockStatusRequest)(nil).Request), ctx, number, res)
}
