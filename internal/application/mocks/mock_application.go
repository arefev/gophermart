// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/application/application.go

// Package mock_application is a generated GoMock package.
package mock_application

import (
	context "context"
	reflect "reflect"

	model "github.com/arefev/gophermart/internal/model"
	trm "github.com/arefev/gophermart/internal/trm"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepo) Create(ctx context.Context, login, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, login, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepoMockRecorder) Create(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepo)(nil).Create), ctx, login, password)
}

// Exists mocks base method.
func (m *MockUserRepo) Exists(ctx context.Context, login string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, login)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockUserRepoMockRecorder) Exists(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockUserRepo)(nil).Exists), ctx, login)
}

// FindByLogin mocks base method.
func (m *MockUserRepo) FindByLogin(ctx context.Context, login string) (*model.User, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLogin", ctx, login)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindByLogin indicates an expected call of FindByLogin.
func (mr *MockUserRepoMockRecorder) FindByLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLogin", reflect.TypeOf((*MockUserRepo)(nil).FindByLogin), ctx, login)
}

// MockOrderRepo is a mock of OrderRepo interface.
type MockOrderRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepoMockRecorder
}

// MockOrderRepoMockRecorder is the mock recorder for MockOrderRepo.
type MockOrderRepoMockRecorder struct {
	mock *MockOrderRepo
}

// NewMockOrderRepo creates a new mock instance.
func NewMockOrderRepo(ctrl *gomock.Controller) *MockOrderRepo {
	mock := &MockOrderRepo{ctrl: ctrl}
	mock.recorder = &MockOrderRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepo) EXPECT() *MockOrderRepoMockRecorder {
	return m.recorder
}

// AccrualByID mocks base method.
func (m *MockOrderRepo) AccrualByID(ctx context.Context, sum float64, status model.OrderStatus, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccrualByID", ctx, sum, status, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccrualByID indicates an expected call of AccrualByID.
func (mr *MockOrderRepoMockRecorder) AccrualByID(ctx, sum, status, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccrualByID", reflect.TypeOf((*MockOrderRepo)(nil).AccrualByID), ctx, sum, status, id)
}

// Create mocks base method.
func (m *MockOrderRepo) Create(ctx context.Context, userID int, status model.OrderStatus, number string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userID, status, number)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOrderRepoMockRecorder) Create(ctx, userID, status, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrderRepo)(nil).Create), ctx, userID, status, number)
}

// CreateWithdrawal mocks base method.
func (m *MockOrderRepo) CreateWithdrawal(ctx context.Context, userID int, number string, sum float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithdrawal", ctx, userID, number, sum)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWithdrawal indicates an expected call of CreateWithdrawal.
func (mr *MockOrderRepoMockRecorder) CreateWithdrawal(ctx, userID, number, sum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithdrawal", reflect.TypeOf((*MockOrderRepo)(nil).CreateWithdrawal), ctx, userID, number, sum)
}

// FindByNumber mocks base method.
func (m *MockOrderRepo) FindByNumber(ctx context.Context, number string) (*model.Order, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNumber", ctx, number)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindByNumber indicates an expected call of FindByNumber.
func (mr *MockOrderRepoMockRecorder) FindByNumber(ctx, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNumber", reflect.TypeOf((*MockOrderRepo)(nil).FindByNumber), ctx, number)
}

// GetByUserID mocks base method.
func (m *MockOrderRepo) GetByUserID(ctx context.Context, userID int) []model.Order {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", ctx, userID)
	ret0, _ := ret[0].([]model.Order)
	return ret0
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockOrderRepoMockRecorder) GetByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockOrderRepo)(nil).GetByUserID), ctx, userID)
}

// GetWithdrawalsByUserID mocks base method.
func (m *MockOrderRepo) GetWithdrawalsByUserID(ctx context.Context, userID int) []model.Withdrawal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawalsByUserID", ctx, userID)
	ret0, _ := ret[0].([]model.Withdrawal)
	return ret0
}

// GetWithdrawalsByUserID indicates an expected call of GetWithdrawalsByUserID.
func (mr *MockOrderRepoMockRecorder) GetWithdrawalsByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawalsByUserID", reflect.TypeOf((*MockOrderRepo)(nil).GetWithdrawalsByUserID), ctx, userID)
}

// WithStatusNew mocks base method.
func (m *MockOrderRepo) WithStatusNew(ctx context.Context) []model.Order {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStatusNew", ctx)
	ret0, _ := ret[0].([]model.Order)
	return ret0
}

// WithStatusNew indicates an expected call of WithStatusNew.
func (mr *MockOrderRepoMockRecorder) WithStatusNew(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStatusNew", reflect.TypeOf((*MockOrderRepo)(nil).WithStatusNew), ctx)
}

// MockBalanceRepo is a mock of BalanceRepo interface.
type MockBalanceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceRepoMockRecorder
}

// MockBalanceRepoMockRecorder is the mock recorder for MockBalanceRepo.
type MockBalanceRepoMockRecorder struct {
	mock *MockBalanceRepo
}

// NewMockBalanceRepo creates a new mock instance.
func NewMockBalanceRepo(ctrl *gomock.Controller) *MockBalanceRepo {
	mock := &MockBalanceRepo{ctrl: ctrl}
	mock.recorder = &MockBalanceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceRepo) EXPECT() *MockBalanceRepoMockRecorder {
	return m.recorder
}

// FindByUserID mocks base method.
func (m *MockBalanceRepo) FindByUserID(ctx context.Context, userID int) (*model.Balance, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", ctx, userID)
	ret0, _ := ret[0].(*model.Balance)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockBalanceRepoMockRecorder) FindByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockBalanceRepo)(nil).FindByUserID), ctx, userID)
}

// UpdateByID mocks base method.
func (m *MockBalanceRepo) UpdateByID(ctx context.Context, id int, current, withdrawn float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByID", ctx, id, current, withdrawn)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockBalanceRepoMockRecorder) UpdateByID(ctx, id, current, withdrawn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockBalanceRepo)(nil).UpdateByID), ctx, id, current, withdrawn)
}

// MockTrManager is a mock of TrManager interface.
type MockTrManager struct {
	ctrl     *gomock.Controller
	recorder *MockTrManagerMockRecorder
}

// MockTrManagerMockRecorder is the mock recorder for MockTrManager.
type MockTrManagerMockRecorder struct {
	mock *MockTrManager
}

// NewMockTrManager creates a new mock instance.
func NewMockTrManager(ctrl *gomock.Controller) *MockTrManager {
	mock := &MockTrManager{ctrl: ctrl}
	mock.recorder = &MockTrManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrManager) EXPECT() *MockTrManagerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockTrManager) Do(ctx context.Context, action trm.TrAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockTrManagerMockRecorder) Do(ctx, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockTrManager)(nil).Do), ctx, action)
}
